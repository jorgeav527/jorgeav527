<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Cords527 Inc.</title>
    <link>http://docs.cordstart.com/projects/</link>
    <description>Recent content in Projects on Cords527 Inc.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Mar 2025 16:11:08 -0500</lastBuildDate><atom:link href="http://docs.cordstart.com/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EpicLabs</title>
      <link>http://docs.cordstart.com/projects/1/</link>
      <pubDate>Thu, 06 Mar 2025 16:11:08 -0500</pubDate>
      
      <guid>http://docs.cordstart.com/projects/1/</guid>
      <description>&lt;h2 id=&#34;epic-labs&#34;&gt;EPIC Labs&lt;/h2&gt;</description>
      <content>&lt;h2 id=&#34;epic-labs&#34;&gt;EPIC Labs&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>Life expectancy</title>
      <link>http://docs.cordstart.com/projects/2/</link>
      <pubDate>Thu, 06 Mar 2025 16:11:08 -0500</pubDate>
      
      <guid>http://docs.cordstart.com/projects/2/</guid>
      <description>&lt;h2 id=&#34;hello-world&#34;&gt;Hello, world!&lt;/h2&gt;</description>
      <content>&lt;h2 id=&#34;hello-world&#34;&gt;Hello, world!&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>Python fundamentals for Data Science</title>
      <link>http://docs.cordstart.com/projects/4/</link>
      <pubDate>Thu, 06 Mar 2025 16:11:08 -0500</pubDate>
      
      <guid>http://docs.cordstart.com/projects/4/</guid>
      <description>&lt;h2 id=&#34;referencias&#34;&gt;Referencias&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/python/python_syntax.asp&#34;&gt;Python Syntax - W3Schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sololearn.com/en/&#34;&gt;SoloLearn - Python Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cs50.harvard.edu/python/2022/&#34;&gt;CS50&amp;rsquo;s Python Course - Harvard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn&#34;&gt;freeCodeCamp Python Curriculum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learnxinyminutes.com/docs/python/&#34;&gt;Learn Python in Y Minutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-operaciones-con-numeros-y-flotantes&#34;&gt;1. Operaciones con numeros y flotantes&lt;/h2&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;934185276&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;934185276&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Numeros y flotantes&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# Sumamos 1 más 1 y mostramos el resultado
print(1&amp;#43;1)  # La salida será 2

# Restamos 1 de 8 y mostramos el resultado
print(8-1)  # La salida será 7

# Multiplicamos 10 por 2 y mostramos el resultado
print(10*2)  # La salida será 20

# División
# Dividimos 11 entre 4 y mostramos el resultado
print(11/4)  # La salida será 2.75 (como número decimal)

# Dividimos 11.0 entre 4.0 y mostramos el resultado
print(11.0/4.0)  # La salida también será 2.75 (como número decimal)

# Modulo
# Calculamos el residuo de la división de 7 entre 3 y mostramos el resultado
print(7%3)  # La salida será 1

# Exponentes
# En este espresión elevamos 2 a la cuarta potencia y mostramos el resultado
print(2**4)  # La salida será 16

# PEMDAS
# realiza la adición antes de la multiplicación, siguiendo la regla de PEMDAS.
print(1 &amp;#43; 3 * 2)    # =&amp;gt; 7
print((1 &amp;#43; 3) * 2)  # =&amp;gt; 8
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



&lt;details&gt;
  &lt;summary&gt;Cual es el resultado de print(( (2 + 8 / 4 ** 2) * (3 - 1) ) % 5) ?&lt;/summary&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;resultado &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(resultado)  &lt;span style=&#34;color:#75715e&#34;&gt;# ¿Qué imprime?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;

&lt;p&gt;Por si no se acuerdan el acrónimo PEMDAS se usa para recordar el orden de las operaciones aritméticas:&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;referencias&#34;&gt;Referencias&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/python/python_syntax.asp&#34;&gt;Python Syntax - W3Schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sololearn.com/en/&#34;&gt;SoloLearn - Python Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cs50.harvard.edu/python/2022/&#34;&gt;CS50&amp;rsquo;s Python Course - Harvard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn&#34;&gt;freeCodeCamp Python Curriculum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learnxinyminutes.com/docs/python/&#34;&gt;Learn Python in Y Minutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-operaciones-con-numeros-y-flotantes&#34;&gt;1. Operaciones con numeros y flotantes&lt;/h2&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;934185276&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;934185276&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Numeros y flotantes&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# Sumamos 1 más 1 y mostramos el resultado
print(1&amp;#43;1)  # La salida será 2

# Restamos 1 de 8 y mostramos el resultado
print(8-1)  # La salida será 7

# Multiplicamos 10 por 2 y mostramos el resultado
print(10*2)  # La salida será 20

# División
# Dividimos 11 entre 4 y mostramos el resultado
print(11/4)  # La salida será 2.75 (como número decimal)

# Dividimos 11.0 entre 4.0 y mostramos el resultado
print(11.0/4.0)  # La salida también será 2.75 (como número decimal)

# Modulo
# Calculamos el residuo de la división de 7 entre 3 y mostramos el resultado
print(7%3)  # La salida será 1

# Exponentes
# En este espresión elevamos 2 a la cuarta potencia y mostramos el resultado
print(2**4)  # La salida será 16

# PEMDAS
# realiza la adición antes de la multiplicación, siguiendo la regla de PEMDAS.
print(1 &amp;#43; 3 * 2)    # =&amp;gt; 7
print((1 &amp;#43; 3) * 2)  # =&amp;gt; 8
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



&lt;details&gt;
  &lt;summary&gt;Cual es el resultado de print(( (2 + 8 / 4 ** 2) * (3 - 1) ) % 5) ?&lt;/summary&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;resultado &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(resultado)  &lt;span style=&#34;color:#75715e&#34;&gt;# ¿Qué imprime?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;

&lt;p&gt;Por si no se acuerdan el acrónimo PEMDAS se usa para recordar el orden de las operaciones aritméticas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Primero las operaciones dentro de los paréntesis.&lt;/li&gt;
&lt;li&gt;Luego exponentes o potencias.&lt;/li&gt;
&lt;li&gt;Luego multiplicaciones y divisiones de izquierda a derecha.&lt;/li&gt;
&lt;li&gt;Y por último sumas y restas también de izquierda a derecha.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-operaciones-con-boleanos&#34;&gt;2. Operaciones con boleanos&lt;/h2&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;193264875&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;193264875&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Boleanos&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# Realizamos la operación lógica &amp;#34;and&amp;#34; entre True y False y mostramos el resultado
print(True and False)  # La salida será False

# En esta operación &amp;#34;and&amp;#34;, ambos operandos deben ser True para que el resultado sea True.
# Como uno de los operandos es False, el resultado es False.

# Realizamos la operación lógica &amp;#34;or&amp;#34; entre False y True y mostramos el resultado
print(False or True)  # La salida será True

# En esta operación &amp;#34;or&amp;#34;, al menos uno de los operandos debe ser True para que el resultado sea True.
# Como uno de los operandos es True, el resultado es True.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



&lt;details&gt;
  &lt;summary&gt;Ojo&lt;/summary&gt;
  &lt;p&gt;En Python, las comparaciones entre valores numéricos y valores booleanos pueden ser interesantes debido a que por ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Comparamos si 0 es igual a False y mostramos el resultado&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# La salida será True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# En Python, False se considera igual a 0 en contextos de comparación numérica.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Comparamos si 1 es igual a True y mostramos el resultado&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# La salida será True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Al igual que en el caso anterior, True se considera igual a 1 en contextos de comparación numérica.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Mucho cuidado&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; -5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Aplicamos la operación lógica &amp;#34;not&amp;#34; a True y mostramos el resultado&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# La salida será False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# La operación &amp;#34;not&amp;#34; invierte el valor booleano. Como True se invierte a False, la salida es False.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Aplicamos la operación lógica &amp;#34;not&amp;#34; a False y mostramos el resultado&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# La salida será True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# De manera similar, la operación &amp;#34;not&amp;#34; invierte el valor booleano. Como False se invierte a True, la salida es True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;




  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;456297381&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;456297381&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Comparación&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
print(5 == 5.0)       # =&amp;gt; True   (Igualdad)
print(3 != &amp;#34;3&amp;#34;)       # =&amp;gt; True   (Desigualdad)
print(10 &amp;gt; 8.5)       # =&amp;gt; True   (Mayor que)
print(&amp;#34;a&amp;#34; &amp;lt; &amp;#34;b&amp;#34;)      # =&amp;gt; True   (Menor que - orden lexicográfico)
print([1, 2] &amp;gt;= [1])  # =&amp;gt; True   (Mayor o igual que - compara listas)
print(None &amp;lt;= None)   # =&amp;gt; True   (Menor o igual que - None solo es igual a None)

# [1, 2] &amp;gt;= [1] es True porque:
# Los primeros elementos son iguales (1 == 1).
# La lista izquierda es más larga (tiene un elemento extra: 2).
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h2 id=&#34;3-operaciones-con-cadenas-de-caracteres&#34;&gt;3. Operaciones con cadenas de caracteres&lt;/h2&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;812564973&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;812564973&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Caracteres&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# Cadenas
print(&amp;#34;This is a string.&amp;#34;)
print(&amp;#39;This is also a string.&amp;#39;)

# La forma que se utiliza para inyectar valores en cadenas
name = &amp;#34;jorge&amp;#34;
age = 33
print(f&amp;#34;{name} is {age} years old.&amp;#34;)

# Slices Básicos [start:stop]
cad = &amp;#34;w3resource&amp;#34;
print(cad[:2] &amp;#43; cad[-2:])  # Primeros 2 &amp;#43; últimos 2: &amp;#39;w3ce&amp;#39;
cad = &amp;#34;w3&amp;#34;
print(cad[:2] &amp;#43; cad[-2:])  # &amp;#39;w3w3&amp;#39; (solapa cuando len(cad) &amp;lt;= 4)
cad = &amp;#34;w&amp;#34;
print(cad[:2] &amp;#43; cad[-2:])  # &amp;#39;ww&amp;#39; (Python no da error con índices fuera de rango)

# Slices Complejos [start:stop:step]
cad = &amp;#34;w3resource&amp;#34;
print(cad[2:8:2])  # Desde índice 2 al 8, cada 2 caracteres: &amp;#39;reo&amp;#39;
print(cad[::-1])  # Invierte la cadena: &amp;#39;ecruoser3w&amp;#39;
print(cad[5:1:-1])  # Desde 5 al 1 en reversa: &amp;#39;oser&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



&lt;details&gt;
  &lt;summary&gt;Como ocultar una tarjeta de crédito menos los 4 últimos números?&lt;/summary&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ocultar_tarjeta&lt;/span&gt;(numero):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(numero)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;****&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;****&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;****&lt;/span&gt; {num_str[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  # &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;****&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;****&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;****&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5678&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(ocultar_tarjeta(&lt;span style=&#34;color:#ae81ff&#34;&gt;1234567890125678&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;

&lt;h2 id=&#34;4-colecciones&#34;&gt;4. Colecciones&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(type([]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(type(()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(type({}))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(type(set()))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;429518763&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;429518763&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Listas&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# Tipos de estructuras vacías

# 📚 Características de las Listas en Python `[]`
# Mutables
# Se pueden modificar después de su creación:
lista = [1, 2, 3]
lista[0] = 99  # [99, 2, 3]

# Ordenadas
# Conservan el orden de inserción:
[3, 1, 2] == [1, 2, 3]  # False

# Heterogéneas
# Acepan múltiples tipos de datos:
mezcla = [1, &amp;#34;Python&amp;#34;, True, 3.14, [1, 2]]

# Acceso por índices
# (`[0]`) y negativos (`[-1]`):
lista = [10, 20, 30]
print(lista[-1])  # 30

# Slicing
# Subconjuntos con `[inicio:fin:paso]`:
[1, 2, 3, 4][1:3]  # [2, 3]
[1, 2, 3, 4][::2]  # [1, 3]
[1, 2, 3, 4][::-1]  # [4, 3, 2, 1]

# Anidadas
# Pueden contener otras listas:
matriz = [[1, 2], [3, 4]]

# operaciones de listas
lista = [1, 2, 3]
lista.extend([4, 5])   # [1,2,3,4,5]
lista.insert(1, 99)    # [1,99,2,3]
lista.remove(2)        # [1,99,3]
lista.reverse()        # [3,99,1]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;594387612&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;594387612&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Tuplas&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# 📚 Características de las Tuplas en Python `()`

## 📌 Características Principales

# Inmutables
# No se pueden modificar después de su creación:
tupla = (1, 2, 3)
# tupla[0] = 99  # Error: TypeError

# Ordenadas
# Conservan el orden de inserción:
(3, 1, 2) == (1, 2, 3)  # False

# Heterogéneas
# Aceptan múltiples tipos de datos:
mezcla = (1, &amp;#34;Python&amp;#34;, True, 3.14, [1, 2])  # Sí permite listas internas

# Acceso por índices
# Positivos (`[0]`) y negativos (`[-1]`):
tupla = (10, 20, 30)
print(tupla[-1])  # 30

# Slicing
# Subconjuntos con `[inicio:fin:paso]`:
(1, 2, 3, 4)[1:3]  # (2, 3)
(1, 2, 3, 4)[::2]  # (1, 3)
(1, 2, 3, 4)[::-1]  # (4, 3, 2, 1)

# Anidadas
# Pueden contener otras tuplas:
matriz = ((1, 2), (3, 4))

# Operaciones de listas
# Concatenación
tupla1 = (1, 2)
tupla2 = (3, 4)
print(tupla1 &amp;#43; tupla2)  # (1, 2, 3, 4)

# Repetición
print((&amp;#34;a&amp;#34;,) * 3)  # (&amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;)

# Longitud
print(len((1, 2, 3)))  # 3

# Contenido
print(2 in (1, 2, 3))  # True

tupla = (1, 2, 2, 3)

# count() - Cuenta ocurrencias
print(tupla.count(2))  # 2

# index() - Devuelve primera posición
print(tupla.index(3))  # 3

# Desempaquetado
a, b, c = (1, 2, 3)
print(b)  # 2
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;941356728&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;941356728&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Diccionarios&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# 📚 Características de los Diccionarios en Python `{}`

## 📌 Características Principales

# Mutables
# Se pueden modificar después de su creación:
# Como también se pueden crear directamente:
dic = {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2}
dic[&amp;#39;a&amp;#39;] = 99  # {&amp;#39;a&amp;#39;: 99, &amp;#39;b&amp;#39;: 2}

# No ordenados (hasta Python 3.6)
# A partir de Python 3.7&amp;#43; mantienen orden de inserción:
{&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2} == {&amp;#39;b&amp;#39;: 2, &amp;#39;a&amp;#39;: 1}  # False en Python 3.7&amp;#43;

# Claves únicas
# Las claves no se pueden repetir:
dic = {&amp;#39;a&amp;#39;: 1, &amp;#39;a&amp;#39;: 2}  # {&amp;#39;a&amp;#39;: 2} (sobrescribe)

# ejemplo de diccionarios
dic = {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2}

# Acceso
print(dic[&amp;#39;a&amp;#39;])  # 1
print(dic.get(&amp;#39;c&amp;#39;, &amp;#39;default&amp;#39;))  # &amp;#39;default&amp;#39; (evita KeyError)

# Agregar/Modificar
dic[&amp;#39;c&amp;#39;] = 3  # {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3}

# Eliminar
del dic[&amp;#39;b&amp;#39;]  # {&amp;#39;a&amp;#39;: 1, &amp;#39;c&amp;#39;: 3}
valor = dic.pop(&amp;#39;a&amp;#39;)  # valor=1, dic={&amp;#39;c&amp;#39;: 3}

# metodos importantes
dic = {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2}

# keys(), values(), items()
print(dic.keys())   # dict_keys([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;])
print(dic.values()) # dict_values([1, 2])
print(dic.items())  # dict_items([(&amp;#39;a&amp;#39;, 1), (&amp;#39;b&amp;#39;, 2)])
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;612384597&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;612384597&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Conjuntos&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# 📚 Características de los Conjuntos (Sets) en Python `{}`

## 📌 Características Principales

# Mutables (set) vs Inmutables (frozenset)
mi_set = {1, 2, 3}
mi_frozenset = frozenset([1, 2, 3])

# No ordenados
print({2, 1, 3} == {1, 2, 3})  # True

# Elementos únicos (no duplicados)
print({1, 1, 2})  # {1, 2}

# Hashables como elementos
valido = {1, &amp;#39;a&amp;#39;, (1, 2)}
# invalido = {[1, 2]}  # TypeError (listas no son hashables)

a = {1, 2, 3}
b = {3, 4, 5}

# Unión
print(a | b)  # {1, 2, 3, 4, 5}

# Intersección
print(a &amp;amp; b)  # {3}

# Diferencia
print(a - b)  # {1, 2}

# Diferencia simétrica
print(a ^ b)  # {1, 2, 4, 5}

# Metodos esenciales
s = {1, 2}

# Añadir elemento
s.add(3)  # {1, 2, 3}

# Eliminar
s.remove(2)  # {1, 3} (KeyError si no existe)
s.discard(99)  # No da error

# Pop (elimina aleatorio)
elem = s.pop()

# Limpiar
s.clear()  # set()
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h2 id=&#34;5-control-de-flujo&#34;&gt;5. Control de flujo&lt;/h2&gt;
&lt;h2 id=&#34;6-funciones&#34;&gt;6. Funciones&lt;/h2&gt;
&lt;h2 id=&#34;7-alcance-de-las-variables&#34;&gt;7. Alcance de las variables&lt;/h2&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;417263895&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;417263895&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Scope de la variable x&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# Alcance de Variables

# Definimos una variable global &amp;#39;x&amp;#39; con el valor 5.
x = 5

# Creamos una función &amp;#39;set_x&amp;#39; que toma un argumento &amp;#39;num&amp;#39;.
def set_x(num):
    # Dentro de la función, creamos una nueva variable local &amp;#39;x&amp;#39; con el valor &amp;#39;num&amp;#39;.
    x = num
    # Imprimimos el valor de &amp;#39;x&amp;#39; dentro de la función &amp;#39;set_x&amp;#39;.
    print(&amp;#34;Dentro de set_x:&amp;#34;, x)

# Creamos una función &amp;#39;set_global_x&amp;#39; que toma un argumento &amp;#39;num&amp;#39;.
def set_global_x(num):
    # Utilizamos la palabra clave &amp;#39;global&amp;#39; para indicar que estamos modificando la variable global &amp;#39;x&amp;#39;.
    global x
    # Imprimimos el valor de la variable global &amp;#39;x&amp;#39; antes de cambiarlo.
    print(&amp;#34;Antes de set_global_x:&amp;#34;, x)
    # Asignamos el valor &amp;#39;num&amp;#39; a la variable global &amp;#39;x&amp;#39;.
    x = num
    # Imprimimos el nuevo valor de la variable global &amp;#39;x&amp;#39;.
    print(&amp;#34;Después de set_global_x:&amp;#34;, x)

# Imprimimos el valor de la variable global &amp;#39;x&amp;#39; antes de llamar a las funciones.
print(&amp;#34;Valor de x antes de las funciones:&amp;#34;, x)

# Llamamos a las funciones &amp;#39;set_x&amp;#39; y &amp;#39;set_global_x&amp;#39; con diferentes valores.
set_x(43)  # Esto crea una variable local &amp;#39;x&amp;#39; con el valor 43 y la imprime.
set_global_x(6)  # Esto modifica la variable global &amp;#39;x&amp;#39; y la imprime.

# Imprimimos el valor de la variable global &amp;#39;x&amp;#39; después de llamar a las funciones.
print(&amp;#34;Valor de x después de las funciones:&amp;#34;, x)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



&lt;details&gt;
  &lt;summary&gt;Colecciones o estructuras de datos&lt;/summary&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;

&lt;h2 id=&#34;8-opp&#34;&gt;8. OPP&lt;/h2&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;921687345&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;921687345&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Class Dog&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
from abc import ABC, abstractmethod, ClassVar

# Abstracción: Definir interfaces y ocultar detalles complejos
class Animal(ABC):  # Clase abstracta
    @abstractmethod
    def make_sound(self) -&amp;gt; str:
        pass

# Encapsulamiento: Ocultar detalles internos y proveer interfaz controlada
# Herencia de la clase Animal
class Dog(Animal):
    &amp;#34;&amp;#34;&amp;#34;A class representing a dog with basic attributes and behaviors.&amp;#34;&amp;#34;&amp;#34;

    species: ClassVar[str] = &amp;#39;mammal&amp;#39;
    total_dogs = 0  # Variable de clase para rastrear todos los perros creados

    def __init__(self, name: str, age: int) -&amp;gt; None:
        if not name:
            raise ValueError(&amp;#34;Name cannot be empty&amp;#34;)
        if age &amp;lt;= 0:
            raise ValueError(&amp;#34;Age must be positive&amp;#34;)

        # Atributos &amp;#34;protegidos&amp;#34; (por convención con _)
        self._name: str = name
        self._age: int = age
        Dog.total_dogs &amp;#43;= 1  # Incrementa el contador al crear una nueva instancia

        publico = 1      # Público
        _protegido = 2   # Protegido (por convención)
        __privado = 3    # &amp;#34;Privado&amp;#34; (name mangling)

    @property
    def description(self) -&amp;gt; str:
        &amp;#34;&amp;#34;&amp;#34;Return a formatted string with the dog&amp;#39;s name and age.&amp;#34;&amp;#34;&amp;#34;
        return f&amp;#34;{self._name} is {self._age} years old&amp;#34;

    def speak(self, sound: str) -&amp;gt; str:
        return f&amp;#34;{self._name} says {sound.lower()}&amp;#34;

    def have_birthday(self) -&amp;gt; None:
        &amp;#34;&amp;#34;&amp;#34;Increment the dog&amp;#39;s age by 1 year.&amp;#34;&amp;#34;&amp;#34;
        self._age &amp;#43;= 1
        print(f&amp;#34;Happy birthday {self._name}! Now {self.description}&amp;#34;)

    @staticmethod
    def dog_years_to_human(years: int) -&amp;gt; float:
        return years * 4

    @classmethod
    def from_birth_year(cls, name: str, birth_year: int) -&amp;gt; &amp;#39;Dog&amp;#39;:
        current_year = 2023  # Podría obtenerse de datetime.now().year
        age = current_year - birth_year
        return cls(name, age)  # cls se refiere a la clase misma crea una nueva instancia (Dog)

    @classmethod
    def get_total_dogs(cls) -&amp;gt; int:
        &amp;#34;&amp;#34;&amp;#34;Método de clase para obtener el total de perros creados.&amp;#34;&amp;#34;&amp;#34;
        return cls.total_dogs

    # Métodos para obtener y modificar los atributos privados
    def get_name(self):
        return self.__name

    def get_age(self):
        return self.__age

    def set_name(self, name):
        self.__name = name

    def set_age(self, age):
        self.__age = age

# polimorfismo se ve mejor cuando tenemos múltiples clases no relacionadas por herencia pero que comparten la misma interfaz.
class Cat(Animal):
    def __init__(self, name: str):
        self.name = name

    def make_sound(self) -&amp;gt; str:
        return &amp;#34;Meow!&amp;#34;

# Acceso:
e = Ejemplo()
print(e.publico)        # ✅ 1
print(e._protegido)     # ⚠️ 2 (accesible pero no recomendado)
# print(e.__privado)    # ❌ Error
print(e._Ejemplo__privado)  # ⚠️ 3 (acceso forzado - evitar
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



&lt;details&gt;
  &lt;summary&gt;Que es el ABC&lt;/summary&gt;
  &lt;p&gt;Es una clase especial del módulo abc que permite crear clases abstractas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No se puede instanciar directamente: Solo sirve como plantilla.&lt;/li&gt;
&lt;li&gt;Obliga a implementar métodos: Define un &amp;ldquo;contrato&amp;rdquo; que las subclases deben cumplir.&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;

&lt;h2 id=&#34;9-errores&#34;&gt;9. ERRORES&lt;/h2&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;413697258&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;413697258&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Errores&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# Esto causará un error de sintaxis.
print( 0 / 0 ))

# Cell In[14], line 2
#    print( 0 / 0 ))
                  ^
# SyntaxError: unmatched &amp;#39;)&amp;#39;

# Esto causará un error de división por cero, pero la sintaxis será correcta.
print( 0 / 0)

# ---------------------------------------------------------------------------
# ZeroDivisionError                         Traceback (most recent call last)
# Cell In[15], line 2
#      1 # Esto causará un error de división por cero, pero la sintaxis será correcta.
# ----&amp;gt; 2 print( 0 / 0)

# ZeroDivisionError: division by zero

# Asignamos un valor a la variable x.
x = 10

# Comprobamos si x es mayor que 5.
if x &amp;gt; 5:
    # Si x es mayor que 5, levantamos una excepción con un mensaje personalizado.
    raise Exception(f&amp;#39;x should not exceed 5. The value of x was: {x}&amp;#39;)

# Bloque try-except básico (except se ejecuta si hay errores)
try:
    # Código que puede fallar
    archivo = open(&amp;#34;inexistente.txt&amp;#34;)
except Exception as e:
    print(f&amp;#34;Ocurrió un error: {e}&amp;#34;)

# Bloque try-except con múltiples excepciones
try:
    # Código que puede fallar
    archivo = open(&amp;#34;inexistente.txt&amp;#34;)
except FileNotFoundError as e:
    print(f&amp;#34;Archivo no encontrado: {e}&amp;#34;)
except PermissionError as e:
    print(f&amp;#34;Permiso denegado: {e}&amp;#34;)
except Exception as e:
    print(f&amp;#34;Ocurrió un error: {e}&amp;#34;)

# Bloque else (se ejecuta si no hay errores)
try:
    # print(&amp;#34;Intentando abrir el archivo&amp;#34;)
    archivo = open(&amp;#34;datos.txt&amp;#34;, &amp;#34;r&amp;#34;)  # Modo lectura
    contenido = archivo.read()
except Exception as e:
    print(f&amp;#34;Ocurrió un error: {e}&amp;#34;)
else:
    # print(&amp;#34;Archivo leído correctamente&amp;#34;)
    print(f&amp;#34;Contenido: {contenido}&amp;#34;)


# Bloque try-except-finally
try:
    # Código que puede fallar
    archivo = open(&amp;#34;datos.txt&amp;#34;, &amp;#34;r&amp;#34;)  # Modo lectura
    contenido = archivo.read()
except Exception as e:
    print(f&amp;#34;Ocurrió un error: {e}&amp;#34;)
else:
    # print(&amp;#34;Archivo leído correctamente&amp;#34;)
    print(f&amp;#34;Contenido: {contenido}&amp;#34;)
finally:
    # Cerrar el archivo, independientemente de si hubo errores o no
    archivo.close()

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


</content>
    </item>
    
    <item>
      <title>Todo List with Kotlin-Crux-Axium</title>
      <link>http://docs.cordstart.com/projects/3/</link>
      <pubDate>Thu, 06 Mar 2025 16:11:08 -0500</pubDate>
      
      <guid>http://docs.cordstart.com/projects/3/</guid>
      <description>&lt;h2 id=&#34;hello-world&#34;&gt;Hello, world!&lt;/h2&gt;</description>
      <content>&lt;h2 id=&#34;hello-world&#34;&gt;Hello, world!&lt;/h2&gt;
</content>
    </item>
    
  </channel>
</rss>
